{{/* Corrected templates/deployment-lightrag.yaml */}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lightrag.fullname" . }}
  labels:
    {{- include "lightrag.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "lightrag.selectorLabels" . | nindent 6 }}
  strategy: # Add a rolling update strategy
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lightrag.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lightrag.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30 # Allow time for graceful shutdown
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # No command/args specified, uses Dockerfile CMD (gunicorn)
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 45 # Increased delay for gunicorn
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 20 # Should be ready faster than live
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 3
          envFrom:
            # Load non-sensitive config
            - configMapRef:
                name: {{ include "lightrag.fullname" . }}-config
            # Load other secrets (API keys, etc.) from the main secret
            - secretRef:
                name: {{ include "lightrag.secretName" . }}
          # Explicitly set POSTGRES_PASSWORD from the correct secret using 'default' logic
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  # Use existingSecret name if provided, otherwise default to the main chart secret name
                  name: {{ .Values.postgresql.auth.existingSecret | default (include "lightrag.secretName" .) }}
                  # Use the key specified in values (default: POSTGRES_PASSWORD)
                  key: {{ .Values.postgresql.auth.secretKeys.passwordKey }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              # This matches the WORKDIR and INPUT_DIR env vars set in the ConfigMap and expected by the app
              mountPath: /app/data
            {{- end }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "lightrag.fullname" . }}-data # Refers to the LightRAG PVC
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}